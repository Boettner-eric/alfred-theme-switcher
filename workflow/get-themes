#!/usr/bin/env osascript -l JavaScript

ObjC.import('stdlib');

function readThemeJSON(filePath) {
    try {
        const fileContent = $.NSString.stringWithContentsOfFileEncodingError(filePath, $.NSUTF8StringEncoding, null);
        const jsonString = ObjC.unwrap(fileContent);
        if (!jsonString) {
            return null;
        }

        const jsonData = JSON.parse(jsonString);
        return jsonData.alfredtheme || null;
    } catch (error) {
        console.log(`Error reading JSON file: ${error}`);
        return null;
    }
}

function fileExists(filePath) {
    const fileManager = $.NSFileManager.defaultManager;
    return fileManager.fileExistsAtPath(filePath);
}

function run(argv) {
    const builtinThemes = [
        "Alfred",
        "Alfred Dark",
        "Alfred Modern",
        "Alfred Modern Dark",
        "Alfred Classic",
        "Alfred macOS",
        "Alfred macOS Dark",
        "Frosty Teal",
        "Large Avenir",
        "High Contrast Light"
    ];

    const themeNames = [];
    const themeSubtitles = [];

    builtinThemes.forEach(themeName => {
        themeNames.push(themeName);
        themeSubtitles.push("Alfred Default Theme");
    });

    try {
        const app = Application.currentApplication();
        app.includeStandardAdditions = true;

        const alfredPrefsPath = $.getenv('alfred_preferences') + "/themes";
        const userThemeFolders = app.doShellScript(`ls "${alfredPrefsPath}"`).split('\r');

        const userThemes = [];

        userThemeFolders.forEach(folderName => {
            try {
                const themeJSONPath = `${alfredPrefsPath}/${folderName}/theme.json`;
                const themeData = readThemeJSON(themeJSONPath);

                if (themeData && themeData.name) {
                    userThemes.push({
                        name: themeData.name,
                        subtitle: themeData.credit ? `by ${themeData.credit}` : "Custom Theme"
                    });
                }
            } catch (error) {
                console.log(`Error processing theme folder ${folderName}: ${error}`);
            }
        });

        // Sort alphabetically to match Alfred's theme list
        userThemes.sort((a, b) => a.name.localeCompare(b.name));
        userThemes.forEach(theme => {
            themeNames.push(theme.name);
            themeSubtitles.push(theme.subtitle);
        });

    } catch (error) {
        // If there's any error accessing user themes, just continue with built-in themes
        console.log(`Error accessing user themes folder: ${error}`);
    }

    const items = themeNames.map((themeName, index) => {
        const iconPath = "./icons/" + themeName + ".png";
        const item = {
            type: "default",
            title: themeName,
            subtitle: themeSubtitles[index],
            arg: themeName,
            autocomplete: themeName
        };
        
        if (fileExists(iconPath)) {
            item.icon = { path: iconPath };
        }
        
        return item;
    });

    return JSON.stringify({ items });
}